import Head from "next/head";
import Image from "next/image";
import { Inter } from "next/font/google";
import styles from "@/styles/Home.module.css";
import axios from "axios";
import { useState } from "react";
import Header from "@/components/header";

interface Quote {
  id: number;
  text: string;
  author: string;
}

interface HomeProps {
  quotes: {
    quotes: Quote[];
    authors: string[];
  };
}

const inter = Inter({ subsets: ["latin"] });

export default function Home(props: HomeProps): JSX.Element {
  const [quotes, setQuotes] = useState<Quote[]>(props.quotes.quotes ?? []);
  const [quoteId, setQuoteId] = useState<number | undefined>();
  
  const handleChange = (e: React.ChangeEvent<HTMLSelectElement>): void => {
    if (e.target.value === "All") {
      setQuotes(props.quotes.quotes);
    } else {
      const filterWriter = props.quotes.quotes.filter(
        (item) => item.author === e.target.value
      );
      setQuotes(filterWriter);
    }
  };
  
  return (
    <>
      <Head>
        <title>Quotes</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={`${styles.main} ${inter.className}`}>
        <div className={styles.description}>
          <Header />
          <div style={{ marginLeft: "50px" }}>
            <select
              className={styles.vercelLogo}
              aria-label="Default select example"
              onChange={handleChange}
            >
              <option>All</option>
              {props.quotes.authors.map((item: string, index: number) => (
                <option value={item} key={index}>
                  {item}
                </option>
              ))}
            </select>
          </div>
        </div>
        <div className={styles.center}>
          <h1>Quotes</h1>
        </div>
        <div className={styles.grid}>
          {quotes.map((item: Quote, index: number) => (
            <div className={styles.card} rel="noopener noreferrer" key={index}>
              {item.text.length <= 45 ? (
                <h2>{item.text}</h2>
              ) : quoteId !== item.id ? (
                <h2>
                  {`${item.text.slice(0, 45)}...`}
                  <p
                    style={{ cursor: "pointer", textDecoration: "underline" }}
                    onClick={() => setQuoteId(item.id)}
                  >
                    show more
                  </p>
                </h2>
              ) : (
                <h2>
                  {item.text}
                  <p
                    style={{ cursor: "pointer", textDecoration: "underline" }}
                    onClick={() => setQuoteId(undefined)}
                  >
                    show less
                  </p>
                </h2>
              )}
              <h3 style={{ color: "#5e5e5e" }}>By : {item.author}</h3>
            </div>
          ))}
        </div>
      </main>
    </>
  );
}

export async function getServerSideProps() {
  const getQuotes = async () => {
    try {
      const response = await axios.get("https://wordsapi-nkj3.onrender.com/quotes");
      return response.data;
    } catch (error) {
      console.error(error);
    }
  };
  
  const quotes = (await getQuotes()) ?? {};
  
  return { props: { quotes } };
}

